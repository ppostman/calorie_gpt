openapi: 3.0.0
info:
  title: Calorie GPT API
  description: |
    API for tracking daily calorie intake, nutrition, and weight management.
    Features include:
    - Daily calorie limit management
    - Nutrition entry tracking
    - Weight tracking and monitoring
    - Calorie calculations and remaining calorie tracking

    Authentication:
    All endpoints require an Auth0 JWT token to be sent in the Authorization header with the format: 'Bearer <token>'.
    The token must be obtained through the Auth0 authentication flow.
  version: 1.0.0

servers:
  - url: https://calorie-gpt.onrender.com
    description: Production server

security:
  - oauth2: []

components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://dev-lk0vcub54idn0l5c.us.auth0.com/authorize
          tokenUrl: https://dev-lk0vcub54idn0l5c.us.auth0.com/oauth/token
          scopes:
            openid: OpenID Connect protocol
            profile: User profile information
            email: User email address
            offline_access: Refresh token access

  parameters:
    AuthorizationHeader:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
        pattern: '^Bearer [A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$'
      description: |
        JWT Bearer token from Auth0
        Format: Bearer <token>
        Example: Bearer eyJhbGciOiJSUzI1NiIs...

  schemas:
    DailyCalorieLimitInput:
      type: object
      required:
        - date
        - limit
      properties:
        date:
          type: string
          format: date-time
          example: "2025-02-16T00:00:00Z"
        limit:
          type: number
          format: float
          description: Daily calorie limit
          example: 2000

    DailyCalorieLimit:
      allOf:
        - $ref: '#/components/schemas/DailyCalorieLimitInput'
        - type: object
          properties:
            id:
              type: integer
              example: 1
            user_id:
              type: string
              example: "auth0|123456789"
            created_at:
              type: string
              format: date-time
              example: "2025-02-16T10:30:00Z"
            updated_at:
              type: string
              format: date-time
              example: "2025-02-16T10:30:00Z"

    NutritionEntryInput:
      type: object
      required:
        - date
        - food
        - calories
      properties:
        date:
          type: string
          format: date-time
          example: "2025-02-16T00:00:00Z"
        food:
          type: string
          description: Name of the food item
          example: "Chicken Salad"
        calories:
          type: number
          format: float
          description: Calories in the food item
          example: 350
        protein:
          type: number
          format: float
          description: Protein content in grams
          example: 25
        carbs:
          type: number
          format: float
          description: Carbohydrate content in grams
          example: 15
        fat:
          type: number
          format: float
          description: Fat content in grams
          example: 20
        notes:
          type: string
          description: Additional notes about the food item
          example: "Grilled chicken breast with mixed greens"

    NutritionEntry:
      allOf:
        - $ref: '#/components/schemas/NutritionEntryInput'
        - type: object
          properties:
            id:
              type: integer
              example: 1
            user_id:
              type: string
              example: "auth0|123456789"
            created_at:
              type: string
              format: date-time
              example: "2025-02-16T10:30:00Z"
            updated_at:
              type: string
              format: date-time
              example: "2025-02-16T10:30:00Z"

    DailyCaloriesResponse:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/NutritionEntry'
        totalCalories:
          type: number
          format: float
          description: Total calories consumed for the day
        limit:
          $ref: '#/components/schemas/DailyCalorieLimit'
          nullable: true
        limitStatus:
          type: string
          enum: [exact_match, using_previous, unconfigured]
          description: |
            Status of the calorie limit:
            * exact_match - Limit found for the exact date requested
            * using_previous - Using most recent limit from a previous date
            * unconfigured - No limit has been configured yet
        message:
          type: string
          description: Additional information about the limit status
          example: "Using most recent calorie limit"

    CalorieCalculation:
      type: object
      properties:
        date:
          type: string
          format: date-time
          example: "2025-02-16T00:00:00Z"
        limit:
          type: number
          format: float
          example: 2000
        consumed_calories:
          type: number
          format: float
          example: 1200
        remaining_calories:
          type: number
          format: float
          example: 800
        entries:
          type: array
          items:
            $ref: '#/components/schemas/NutritionEntry'

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Entry not found"

    WeightInput:
      type: object
      required:
        - date
        - value
      properties:
        date:
          type: string
          format: date-time
          example: "2025-02-16T00:00:00Z"
        value:
          type: number
          format: float
          description: Weight in kilograms
          example: 75.5
        notes:
          type: string
          description: Additional notes about the weight record

    Weight:
      allOf:
        - $ref: '#/components/schemas/WeightInput'
        - type: object
          properties:
            id:
              type: integer
              example: 1
            user_id:
              type: string
              example: "auth0|123456789"
            created_at:
              type: string
              format: date-time
              example: "2025-02-16T10:30:00Z"
            updated_at:
              type: string
              format: date-time
              example: "2025-02-16T10:30:00Z"

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        sub:
          type: string
          example: "auth0|123456789"
        email:
          type: string
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        picture:
          type: string
          example: "https://example.com/avatar.jpg"
        created_at:
          type: string
          format: date-time
          example: "2025-02-16T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-02-16T10:30:00Z"

    DailyCalorieLimitResponse:
      type: object
      properties:
        limit:
          $ref: '#/components/schemas/DailyCalorieLimit'
        status:
          type: string
          enum: [exact_match, using_previous, unconfigured]
          description: |
            Status of the response:
            * exact_match - Limit found for the exact date requested
            * using_previous - Using most recent limit from a previous date
            * unconfigured - No limit has been configured yet
        message:
          type: string
          description: Additional information about the response
          example: "Using most recent calorie limit"

paths:
  /oauth2/authorize:
    get:
      operationId: handleOAuth2Authorize
      summary: Start OAuth2 authorization flow
      parameters:
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum: [code]
        - name: client_id
          in: query
          required: true
          schema:
            type: string
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
            format: uri
        - name: scope
          in: query
          required: false
          schema:
            type: string
        - name: state
          in: query
          required: false
          schema:
            type: string
      responses:
        '302':
          description: Redirect to Auth0 login page
          headers:
            Location:
              schema:
                type: string
                format: uri

  /oauth2/callback:
    get:
      operationId: handleOAuth2Callback
      summary: Handle OAuth2 callback from Auth0
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect back to application
          headers:
            Location:
              schema:
                type: string
                format: uri

  /oauth2/token:
    post:
      operationId: handleTokenExchange
      summary: Exchange authorization code for tokens
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
                - code
                - redirect_uri
              properties:
                grant_type:
                  type: string
                  enum: [authorization_code]
                code:
                  type: string
                redirect_uri:
                  type: string
                  format: uri
      responses:
        '200':
          description: Token exchange successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                  expires_in:
                    type: integer
                  refresh_token:
                    type: string
                  id_token:
                    type: string

  /oauth2/userinfo:
    get:
      operationId: handleUserInfo
      summary: Get authenticated user information
      security:
        - oauth2: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /daily-limit:
    post:
      operationId: createDailyLimit
      summary: Create or update a daily calorie limit
      security:
        - oauth2: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DailyCalorieLimitInput'
      responses:
        '201':
          description: Daily limit created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyCalorieLimit'
        '200':
          description: Daily limit updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyCalorieLimit'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /daily-limit/{date}:
    get:
      operationId: getDailyLimit
      summary: Get daily calorie limit for a specific date. If no limit exists for the requested date, returns the most recent limit. If no limits exist at all, returns a success response indicating no limit is configured.
      security:
        - oauth2: []
      parameters:
        - name: date
          in: path
          required: true
          schema:
            type: string
            format: date-time
          description: Date in YYYY-MM-DDTHH:MM:SSZ format
          example: "2025-02-16T00:00:00Z"
      responses:
        '200':
          description: Daily limit response. May contain an exact match, previous limit, or unconfigured status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyCalorieLimitResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /calories/{date}:
    get:
      operationId: getDailyCalories
      summary: Get daily calories and limit for a specific date. If no limit exists for the requested date, returns the most recent limit. If no limits exist at all, returns null limit with unconfigured status.
      security:
        - oauth2: []
      parameters:
        - name: date
          in: path
          required: true
          schema:
            type: string
            format: date-time
          description: Date in YYYY-MM-DDTHH:MM:SSZ format
          example: "2025-02-16T00:00:00Z"
      responses:
        '200':
          description: Daily calories with limit status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyCaloriesResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /entries:
    post:
      operationId: createEntry
      summary: Create a new nutrition entry
      security:
        - oauth2: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NutritionEntryInput'
      responses:
        '201':
          description: Entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionEntry'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      operationId: getEntries
      summary: Get all nutrition entries
      security:
        - oauth2: []
      responses:
        '200':
          description: List of nutrition entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NutritionEntry'

  /entries/date/{date}:
    get:
      operationId: getEntriesByDate
      summary: Get nutrition entries for a specific date
      security:
        - oauth2: []
      parameters:
        - name: date
          in: path
          required: true
          schema:
            type: string
            format: date-time
          description: Date in YYYY-MM-DDTHH:MM:SSZ format
          example: "2025-02-16T00:00:00Z"
      responses:
        '200':
          description: List of nutrition entries for the date
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NutritionEntry'

  /entries/{id}:
    get:
      operationId: getEntry
      summary: Get a specific nutrition entry
      security:
        - oauth2: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Entry ID
      responses:
        '200':
          description: Nutrition entry found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionEntry'
        '404':
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      operationId: updateEntry
      summary: Update a nutrition entry
      security:
        - oauth2: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Entry ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NutritionEntryInput'
      responses:
        '200':
          description: Entry updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionEntry'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to update this entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      operationId: deleteEntry
      summary: Delete a nutrition entry
      security:
        - oauth2: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Entry ID
      responses:
        '200':
          description: Entry deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Entry deleted successfully"
        '403':
          description: Not authorized to delete this entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /weight:
    post:
      operationId: createWeight
      summary: Create a new weight record
      security:
        - oauth2: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeightInput'
      responses:
        '201':
          description: Weight record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weight'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      operationId: getWeights
      summary: Get all weight records
      security:
        - oauth2: []
      responses:
        '200':
          description: List of weight records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Weight'

  /weight/date/{date}:
    get:
      operationId: getWeightsByDate
      summary: Get weight records for a specific date
      security:
        - oauth2: []
      parameters:
        - name: date
          in: path
          required: true
          schema:
            type: string
            format: date-time
          description: Date in YYYY-MM-DDTHH:MM:SSZ format
          example: "2025-02-16T00:00:00Z"
      responses:
        '200':
          description: List of weight records for the date
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Weight'

  /weight/{id}:
    get:
      operationId: getWeight
      summary: Get a specific weight record
      security:
        - oauth2: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Weight record ID
      responses:
        '200':
          description: Weight record found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weight'
        '404':
          description: Weight record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      operationId: updateWeight
      summary: Update a weight record
      security:
        - oauth2: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Weight record ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeightInput'
      responses:
        '200':
          description: Weight record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weight'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to update this weight record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Weight record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      operationId: deleteWeight
      summary: Delete a weight record
      security:
        - oauth2: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Weight record ID
      responses:
        '200':
          description: Weight record deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Weight record deleted successfully"
        '403':
          description: Not authorized to delete this weight record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Weight record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
